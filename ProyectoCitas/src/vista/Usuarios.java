/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DATUMREDSOFT
 */
public class Usuarios extends javax.swing.JFrame {

    Connection con;
    Statement st;
    ResultSet rs;
    String query;
    PreparedStatement pst;
    DefaultTableModel dtm;
    
    /**
     * Creates new form Usuarios
     */
    public Usuarios() {
        initComponents();
        probarConexion();
        this.setLocationRelativeTo(null);
        listarUsuarios();
    }

    public void probarConexion(){ 
         
        con = Conexion.getConexion(); 
        if (con!=null) { 
        JOptionPane.showMessageDialog(null, "Conexión exitosa"); 
        } else { 
        JOptionPane.showMessageDialog(null, "Error en la conexión"); 
        } 
    } 
    
    private void listarUsuarios(){ 
        query = "SELECT * FROM Usuarios"; //Sentencia SQL a Ejecutar 
        con = Conexion.getConexion(); //Obtiene el objeto conexion de l BD 
        try { 
           st = con.createStatement();//Inicia objeto que ejecuta la sentencia 
           //Ejecuta sentencia en BD y devuelve registros en forma de tabla 
           rs=st.executeQuery(query); //rs referencia los registros consultados  
           // crea el vector de encabezado del jTable del formulario 
           Object vect[] = {"IDENTIFICACION","NOMBRES","APELLIDOS","EMAIL"}; 
           //Define el modelo de datos con el encabezado de la tabla 
           dtm = new DefaultTableModel(null,vect);//inicializa data del jtable 
           //Leer los registros consultados hasta el final 
            while (rs.next()) {                 
               vect[0]=rs.getInt("Identificacion");//Obtener dato de columna   
               vect[1]=rs.getString("Nombres"); 
               vect[2]=rs.getString("Apellidos"); 
               vect[3]=rs.getString("Correo"); 
               dtm.addRow(vect);//Agrega registro al modelo de datos 
            } 
            jtListaUsuarios.setModel(dtm); // asigna data al Jtable del formulario  
        } catch (Exception e) { 
            JOptionPane.showMessageDialog(null, e.toString()); 
        } 
         
    } 
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtIdentificacion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListaUsuarios = new javax.swing.JTable();
        txtNombreBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("GESTIONAR USUARIOS");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos del usuario", 1, 0, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel6.setText("Identificación:");

        jLabel7.setText("Nombre:");

        jLabel8.setText("Apellido:");

        txtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidoActionPerformed(evt);
            }
        });

        jLabel9.setText("Correo:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", 0, 0, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnModificar.setText("Actualizar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAgregar)
                .addGap(72, 72, 72)
                .addComponent(btnModificar)
                .addGap(75, 75, 75)
                .addComponent(btnEliminar)
                .addGap(92, 92, 92)
                .addComponent(btnNuevo)
                .addContainerGap(204, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar)
                    .addComponent(btnNuevo))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jtListaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Identificación", "Nombre", "Apellido", "Correo"
            }
        ));
        jScrollPane1.setViewportView(jtListaUsuarios);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(333, 333, 333))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNombreBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(txtNombreBuscar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidoActionPerformed

    
    
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        // Obtener los valores de los campos de texto
        String identificacion = txtIdentificacion.getText();
        String nombre = txtNombre.getText();
        String apellido = txtApellido.getText();
        String correo = txtCorreo.getText();

        // Verificar si algún campo está vacío
        if (identificacion.isEmpty() || nombre.isEmpty() || apellido.isEmpty() || correo.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos.");
            return;
        }

        // Insertar el nuevo usuario en la base de datos
        String query = "INSERT INTO Usuarios (Identificacion, Nombres, Apellidos, Correo) VALUES (?, ?, ?, ?)";

        try {
            // Obtener la conexión a la base de datos
            con = Conexion.getConexion();

            // Preparar la sentencia
            pst = con.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(identificacion)); // Convertir Identificación a entero
            pst.setString(2, nombre);
            pst.setString(3, apellido);
            pst.setString(4, correo);

            // Ejecutar la inserción
            int resultado = pst.executeUpdate();

            if (resultado > 0) {
                JOptionPane.showMessageDialog(null, "Usuario agregado exitosamente.");
                limpiarCampos(); // Limpiar los campos de texto después de agregar
                listarUsuarios(); // Actualizar la tabla para mostrar el nuevo registro
            } else {
                JOptionPane.showMessageDialog(null, "Error al agregar usuario.");
            }

            // Cerrar la conexión y los recursos
            pst.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        // Obtener los valores de los campos de texto
        int identificacion = Integer.parseInt(txtIdentificacion.getText());
        String nombre = txtNombre.getText();
        String apellido = txtApellido.getText();
        String correo = txtCorreo.getText();

        // Validar que todos los campos no estén vacíos
        if (nombre.isEmpty() || apellido.isEmpty() || correo.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos.");
            return;
        }

        // Definir la consulta de actualización SQL
        String query = "UPDATE Usuarios SET Nombres = ?, Apellidos = ?, Correo = ? WHERE Identificacion = ?";

        try {
            // Establecer la conexión
            con = Conexion.getConexion();
            pst = con.prepareStatement(query);

            // Asignar los valores a los parámetros de la consulta
            pst.setString(1, nombre);
            pst.setString(2, apellido);
            pst.setString(3, correo);
            pst.setInt(4, identificacion);

            // Ejecutar la consulta de actualización
            int rowsAffected = pst.executeUpdate();

            // Verificar si se actualizó correctamente
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Usuario actualizado correctamente.");
                listarUsuarios();  // Actualiza la tabla después de la modificación
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró el usuario con la identificación proporcionada.");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el usuario: " + e.toString());
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        // Obtener la identificación del campo de texto
        int identificacion;
        try {
            identificacion = Integer.parseInt(txtIdentificacion.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese una identificación válida.");
            return;
        }

        // Confirmar eliminación
        int confirmacion = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar este usuario?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            // Definir la consulta SQL para eliminar el usuario
            String query = "DELETE FROM Usuarios WHERE Identificacion = ?";

            try {
                // Establecer la conexión
                con = Conexion.getConexion();
                pst = con.prepareStatement(query);

                // Asignar el valor de la identificación al parámetro de la consulta
                pst.setInt(1, identificacion);

                // Ejecutar la consulta de eliminación
                int rowsAffected = pst.executeUpdate();

                // Verificar si se eliminó correctamente
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Usuario eliminado correctamente.");
                    listarUsuarios();  // Actualizar la tabla después de la eliminación
                    limpiarCampos();  // Limpiar los campos después de eliminar
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontró el usuario con la identificación proporcionada.");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al eliminar el usuario: " + e.toString());
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        // Obtener el nombre a buscar desde el campo de texto
        String nombre = txtNombreBuscar.getText().trim();

        // Verificar si el nombre no está vacío
        if (nombre.isEmpty()) {
            // Si el campo de búsqueda está vacío, listar todos los usuarios
            listarUsuarios();
            return;
        }

        // Consulta SQL para buscar usuarios por nombre
        String query = "SELECT * FROM Usuarios WHERE Nombres LIKE ?";

        try {
            // Obtener la conexión
            con = Conexion.getConexion();
            pst = con.prepareStatement(query);

            // Asignar el valor del nombre al parámetro de la consulta
            pst.setString(1, "%" + nombre + "%");  // Usamos LIKE con % para buscar coincidencias parciales

            // Ejecutar la consulta y obtener el resultado
            rs = pst.executeQuery();

            // Definir el encabezado de la tabla
            Object[] vect = {"IDENTIFICACION", "NOMBRES", "APELLIDOS", "EMAIL"};

            // Inicializar el modelo de la tabla con los resultados
            dtm = new DefaultTableModel(null, vect);

            // Leer los registros obtenidos de la consulta
            while (rs.next()) {
                Object[] fila = new Object[4];
                fila[0] = rs.getInt("Identificacion");
                fila[1] = rs.getString("Nombres");
                fila[2] = rs.getString("Apellidos");
                fila[3] = rs.getString("Correo");

                // Agregar la fila al modelo de la tabla
                dtm.addRow(fila);
            }

            // Asignar el modelo actualizado a la tabla
            jtListaUsuarios.setModel(dtm);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al realizar la búsqueda: " + e.toString());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        // Obtener los valores de los campos de texto
        String identificacion = txtIdentificacion.getText();
        String nombre = txtNombre.getText();
        String apellido = txtApellido.getText();
        String correo = txtCorreo.getText();

        // Verificar si algún campo está vacío
        if (identificacion.isEmpty() || nombre.isEmpty() || apellido.isEmpty() || correo.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos.");
            return;
        }

        // Insertar el nuevo usuario en la base de datos
        String query = "INSERT INTO Usuarios (Identificacion, Nombres, Apellidos, Correo) VALUES (?, ?, ?, ?)";

        try {
            // Obtener la conexión a la base de datos
            con = Conexion.getConexion();

            // Preparar la sentencia
            pst = con.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(identificacion)); // Convertir Identificación a entero
            pst.setString(2, nombre);
            pst.setString(3, apellido);
            pst.setString(4, correo);

            // Ejecutar la inserción
            int resultado = pst.executeUpdate();

            if (resultado > 0) {
                JOptionPane.showMessageDialog(null, "Usuario agregado exitosamente.");
                limpiarCampos(); // Limpiar los campos de texto después de agregar
                listarUsuarios(); // Actualizar la tabla para mostrar el nuevo registro
            } else {
                JOptionPane.showMessageDialog(null, "Error al agregar usuario.");
            }

            // Cerrar la conexión y los recursos
            pst.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnNuevoActionPerformed

    // Método para limpiar los campos de texto después de agregar
    private void limpiarCampos() {
        txtIdentificacion.setText("");
        txtNombre.setText("");
        txtApellido.setText("");
        txtCorreo.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Usuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtListaUsuarios;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtIdentificacion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombreBuscar;
    // End of variables declaration//GEN-END:variables
}
